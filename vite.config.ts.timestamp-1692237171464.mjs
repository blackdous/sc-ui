// vite.config.ts
import { resolve as resolve3 } from "path";

// build/plugin/index.ts
import vue from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/@vitejs+plugin-vue@3.2.0_vite@3.2.2_vue@3.2.25/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import dts from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/vite-plugin-dts@1.6.6_vite@3.2.2/node_modules/vite-plugin-dts/dist/index.mjs";
import vueJsx from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/@vitejs+plugin-vue-jsx@2.1.1_vite@3.2.2_vue@3.2.25/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import Components from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/unplugin-vue-components@0.22.9_rollup@2.79.1_vue@3.2.25/node_modules/unplugin-vue-components/dist/vite.mjs";
import { AntDesignVueResolver } from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/unplugin-vue-components@0.22.9_rollup@2.79.1_vue@3.2.25/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import viteCompression from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/vite-plugin-compression@0.5.1_vite@3.2.2/node_modules/vite-plugin-compression/dist/index.mjs";
import DefineOptions from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/unplugin-vue-define-options@0.12.6/node_modules/unplugin-vue-define-options/dist/vite.mjs";
import vueSetupExtend from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/vite-plugin-vue-setup-extend@0.4.0_vite@3.2.2/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";

// build/plugin/legacy.ts
import legacy from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/@vitejs+plugin-legacy@2.3.0_terser@5.17.7_vite@3.2.2/node_modules/@vitejs/plugin-legacy/dist/index.mjs";
var legacy_default = () => legacy({
  targets: ["ie >= 11"],
  additionalLegacyPolyfills: ["regenerator-runtime/runtime"]
});

// build/plugin/visualizer.ts
import { visualizer } from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/rollup-plugin-visualizer@5.8.3_rollup@2.79.1/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
var visualizer_default = () => {
  return visualizer({
    filename: "./node_modules/.cache/visualizer/stats.html",
    open: true,
    gzipSize: true,
    brotliSize: true
  });
};

// build/plugin/copy.ts
import copy from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/rollup-plugin-copy@3.4.0/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
var copy_default = () => {
  return copy({
    targets: [
      { src: "README.md", dest: "dist/" },
      { src: "src/style/", dest: "dist/" },
      { src: "build/package.json", dest: "dist/" },
      { src: "dist/build.es.ts", dest: "dist/", rename: "sc-ui.es.min.js" }
    ],
    hook: "writeBundle",
    verbose: true
  });
};

// build/constant.ts
var VITE_APP_LEGACY = false;
var VITE_APP_ANALYZE = false;
var VITE_APP_COMPRESS_GZIP = false;
var VITE_APP_COMPRESS_GZIP_DELETE_FILE = false;

// build/plugin/index.ts
var ssrTransformCustomDir = () => {
  return {
    props: [],
    needRuntime: true
  };
};
var createVitePlugins = (isBuild) => {
  const vitePlugins = [
    dts({
      insertTypesEntry: true,
      copyDtsFiles: true
    }),
    vue({
      template: {
        compilerOptions: {
          directiveTransforms: {
            "text-collapse": ssrTransformCustomDir
          }
        }
      }
    }),
    vueJsx(),
    vueSetupExtend(),
    DefineOptions(),
    Components({
      resolvers: [
        AntDesignVueResolver({
          importStyle: "less"
        })
      ],
      dts: true,
      include: [/\.vue$/, /\.vue\?vue/, /\.md$/]
    }),
    copy_default()
  ];
  VITE_APP_LEGACY && isBuild && vitePlugins.push(legacy_default());
  VITE_APP_ANALYZE && vitePlugins.push(visualizer_default());
  if (isBuild) {
    VITE_APP_COMPRESS_GZIP && vitePlugins.push(
      viteCompression({
        deleteOriginFile: VITE_APP_COMPRESS_GZIP_DELETE_FILE
      })
    );
  }
  return vitePlugins;
};

// build/theme/index.ts
import fs from "fs";
import lessToJS from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/less-vars-to-js@1.3.0/node_modules/less-vars-to-js/dist/index.js";
import path from "path";
var __vite_injected_original_dirname = "/Users/velen/Desktop/work/sc/frontend/sc-ui/build/theme";
var themeVariables = lessToJS(
  fs.readFileSync(path.resolve(__vite_injected_original_dirname, "./variables.less"), "utf8")
);

// vite.config.ts
import autoprefixer from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/autoprefixer@10.4.13_postcss@8.4.18/node_modules/autoprefixer/lib/autoprefixer.js";
import postcssFlexbugsFixes from "file:///Users/velen/Desktop/work/sc/frontend/sc-ui/node_modules/.pnpm/postcss-flexbugs-fixes@5.0.2_postcss@8.4.18/node_modules/postcss-flexbugs-fixes/index.js";

// build/umd.build.ts
import { resolve } from "path";
var __vite_injected_original_dirname2 = "/Users/velen/Desktop/work/sc/frontend/sc-ui/build";
var umdBuild = {
  lib: {
    entry: resolve(__vite_injected_original_dirname2, "../src/index.ts"),
    name: "sc-ui",
    formats: ["es", "umd"],
    fileName: (format) => `build.${format}.ts`
  },
  sourcemap: true,
  minify: "terser",
  terserOptions: {
    compress: {
      drop_console: true,
      drop_debugger: true
    }
  },
  rollupOptions: {
    external: ["vue", "vue-slider-component", /^lodash(\/.+|$)/, "moment", /^dayjs(\/.+|$)/, "ant-design-vue", /^@ant-design\/icons-vue/],
    output: {
      globals: {
        vue: "Vue",
        vueSlider: "VueSlider",
        lodash: "lodash",
        moment: "moment",
        dayjs: "dayjs",
        "ant-design-vue": "antd"
      },
      exports: "named",
      chunkFileNames: `dist/[name].js`,
      extend: true
    }
  },
  commonjsOptions: {
    esmExternals: true
  },
  dynamicImportVarsOptions: {}
};

// build/es.build.ts
import { resolve as resolve2 } from "path";
var __vite_injected_original_dirname3 = "/Users/velen/Desktop/work/sc/frontend/sc-ui/build";
var esBuild = {
  outDir: "dist",
  lib: {
    entry: resolve2(__vite_injected_original_dirname3, "../src/index.ts"),
    name: "sc-ui"
  },
  sourcemap: true,
  minify: "terser",
  terserOptions: {
    compress: {
      drop_console: true,
      drop_debugger: true
    }
  },
  rollupOptions: {
    external: ["vue", "vue-slider-component", /^lodash(\/.+|$)/, "moment", /^dayjs(\/.+|$)/, "ant-design-vue", /^@ant-design\/icons-vue/],
    output: [
      {
        format: "es",
        entryFileNames: "[name].js",
        preserveModules: true,
        dir: "dist/es",
        preserveModulesRoot: "src",
        globals: {
          vue: "Vue",
          vueSlider: "VueSlider",
          lodash: "lodash",
          moment: "moment",
          dayjs: "dayjs",
          "ant-design-vue": "ant-design-vue"
        }
      },
      {
        format: "cjs",
        entryFileNames: "[name].js",
        preserveModules: true,
        dir: "dist/lib",
        preserveModulesRoot: "src",
        globals: {
          vue: "Vue",
          vueSlider: "VueSlider",
          lodash: "lodash",
          moment: "moment",
          dayjs: "dayjs",
          "ant-design-vue": "ant-design-vue"
        }
      }
    ]
  },
  commonjsOptions: {
    esmExternals: true
  },
  dynamicImportVarsOptions: {}
};

// vite.config.ts
var __vite_injected_original_dirname4 = "/Users/velen/Desktop/work/sc/frontend/sc-ui";
var vite_config_default = ({ command }) => {
  const isBuild = command === "build";
  const isUmd = process.env.build === "umd";
  return {
    mode: "production",
    resolve: {
      alias: [
        { find: /^~/, replacement: "" },
        { find: "@", replacement: resolve3(__vite_injected_original_dirname4, "./src") }
      ]
    },
    build: isUmd ? { ...umdBuild } : { ...esBuild },
    logLevel: "info",
    clearScreen: false,
    json: {
      namedExports: true,
      stringify: false
    },
    css: {
      preprocessorOptions: {
        less: {
          modifyVars: themeVariables,
          javascriptEnabled: true
        }
      },
      postcss: {
        plugins: [
          autoprefixer({
            overrideBrowserslist: [
              "last 2 version",
              "> 2%"
            ],
            grid: true
          }),
          postcssFlexbugsFixes()
        ]
      }
    },
    plugins: createVitePlugins(isBuild),
    optimizeDeps: {
      include: [
        "@vue/runtime-core",
        "@vue/shared",
        "@iconify/iconify"
      ]
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
